using System.Collections.Generic;

public class BraidGroup : PresentationExample
{
    public BraidGroup()
    {
        name = "B<sub>n</sub>";
        description = "The braid groups";
        parameters = new GroupParameter[] {new() {name = "n", value = "3", description = "Amount of strands the braid groups acts on"}};
        tooltipInfo = "Imagine yourself braiding hair. Putting the left strand in the middle, then the right in the middle. Those actions can be executed after another. It is possible to undo a previous action. This makes braiding a group, called the braid group. It can be generated by exchanging to strands of hair that are next to each other in a clockwise manner.";
        tooltipURL = "https://en.wikipedia.org/wiki/Braid_group";
        updatePresentation();
    }


    public override void updatePresentation() {
        // A non-negative number integer 
        if (int.TryParse(parameters[0].value, out int n) && n >= 1)
        {
            List<string> gen = new List<string>();
            List<string> Gen = new List<string>(); // Uppercase
            List<string> rel = new List<string>();
            
            for (int i = 0; i < n-1; i++)
            {
                gen.Add(((char) ('a' + i)).ToString()) ;
                Gen.Add(((char) ('A' + i)).ToString()) ;
            }
            for (int i = 0; i < n-1; i++)
            {
                for (int j = 0; j < i-1; j++)
                {
                    rel.Add("[" + gen[j] +","+ gen[i]+ "]");
                }
            }
            for (int i = 0; i < n-2; i++)
            {
                rel.Add(gen[i]+gen[i+1]+gen[i]+ "=" + gen[i+1]+gen[i]+gen[i+1]);
            }
       
            generators = gen.ToArray();
            relators = rel.ToArray();
        }
    }
}
